{\rtf1\ansi\ansicpg1251\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 AmericanTypewriter;
}
{\colortbl;\red255\green255\blue255;\red22\green22\blue21;\red238\green240\blue242;}
{\*\expandedcolortbl;;\cssrgb\c11373\c11373\c10588;\cssrgb\c94510\c95294\c96078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh14460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \uc0\u1051 \u1072 \u1073  2\
\uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  1 \u1089 ++
\f1\b0 \
\
#include <iostream>\
#include <cmath>\
using namespace std;\
\
struct Point \{\
    double x, y;\
\};\
\
struct Line \{\
    double a, b, c; \
\};\
\
double distanceBetweenPoints(Point p1, Point p2) \{\
    return sqrt(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2));\
\}\
\
double distancePointToLine(Point p, Line l) \{\
    return abs(l.a * p.x + l.b * p.y + l.c) / sqrt(pow(l.a, 2) + pow(l.b, 2));\
\}\
\
Point intersectionPoint(Line l1, Line l2) \{\
    Point p;\
    double det = l1.a * l2.b - l2.a * l1.b;\
    if (det == 0) \{\
        // \uc0\u1055 \u1088 \u1103 \u1084 \u1099 \u1077  \u1087 \u1072 \u1088 \u1072 \u1083 \u1083 \u1077 \u1083 \u1100 \u1085 \u1099 , \u1074  \u1101 \u1090 \u1086 \u1084  \u1087 \u1088 \u1080 \u1084 \u1077 \u1088 \u1077  \u1084 \u1099  \u1085 \u1077  \u1086 \u1073 \u1088 \u1072 \u1073 \u1072 \u1090 \u1099 \u1074 \u1072 \u1077 \u1084  \u1101 \u1090 \u1086 \u1090  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \
    \} else \{\
        p.x = (l2.b * (-l1.c) - l1.b * (-l2.c)) / det;\
        p.y = (l1.a * (-l2.c) - l2.a * (-l1.c)) / det;\
    \}\
    return p;\
\}\
\
double angleBetweenLines(Line l1, Line l2) \{\
    return atan(fabs((l1.a * l2.b - l2.a * l1.b) / (l1.a * l2.a + l1.b * l2.b)));\
\}\
\
int main() \{\
    \
    Line line1 = \{1, 2, -3\};  \
    Line line2 = \{3, -4, 5\};  \
    Point point = \{2, 3\};    \
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1088 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1081  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1082 \u1072 \u1078 \u1076 \u1086 \u1081  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
    double distance1 = distancePointToLine(point, line1);\
    double distance2 = distancePointToLine(point, line2);\
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1090 \u1086 \u1095 \u1082 \u1080  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1103 \u1084 \u1099 \u1093 \
    Point intersection = intersectionPoint(line1, line2);\
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1088 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1103  \u1086 \u1090  \u1079 \u1072 \u1076 \u1072 \u1085 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1090 \u1086 \u1095 \u1082 \u1080  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1103 \u1084 \u1099 \u1093 \
    double distanceToPointOfIntersection = distanceBetweenPoints(point, intersection);\
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1091 \u1075 \u1083 \u1072  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1088 \u1103 \u1084 \u1099 \u1084 \u1080 \
    double angle = angleBetweenLines(line1, line2);\
\
    cout << "\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1087 \u1077 \u1088 \u1074 \u1086 \u1081  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 : " << distance1 << endl;\
    cout << "\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1074 \u1090 \u1086 \u1088 \u1086 \u1081  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 : " << distance2 << endl;\
    cout << "\uc0\u1058 \u1086 \u1095 \u1082 \u1072  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1103 \u1084 \u1099 \u1093 : (" << intersection.x << ", " << intersection.y << ")" << endl;\
    cout << "\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1079 \u1072 \u1076 \u1072 \u1085 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1090 \u1086 \u1095 \u1082 \u1080  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1088 \u1103 \u1084 \u1099 \u1093 : " << distanceToPointOfIntersection << endl;\
    cout << "\uc0\u1059 \u1075 \u1086 \u1083  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1088 \u1103 \u1084 \u1099 \u1084 \u1080 : " << angle << " \u1088 \u1072 \u1076 \u1080 \u1072 \u1085 " << endl;\
\
    return 0;\
\}\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  2 \u1087 \u1080 \u1090 \u1086 \u1085 
\f1\b0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2 \cf0 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
import numpy as np\
import random\
\
a1 = random.uniform(-10, 10)\
b1 = random.uniform(-10, 10)\
c1 = random.uniform(-10, 10)\
d1 = random.uniform(-10, 10)\
\
a2 = random.uniform(-10, 10)\
b2 = random.uniform(-10, 10)\
c2 = random.uniform(-10, 10)\
d2 = random.uniform(-10, 10)\
\
x0 = random.uniform(-10, 10)\
y0 = random.uniform(-10, 10)\
z0 = random.uniform(-10, 10)\
\
# \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1085 \u1086 \u1088 \u1084 \u1072 \u1083 \u1100 \u1085 \u1099 \u1077  \u1074 \u1077 \u1082 \u1090 \u1086 \u1088 \u1099  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1077 \u1081 \
n1 = np.array([a1, b1, c1])\
n2 = np.array([a2, b2, c2])\
\
# \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1091 \u1075 \u1086 \u1083  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1103 \u1084 \u1080 \
angle = np.arccos(np.dot(n1, n2) / (np.linalg.norm(n1) * np.linalg.norm(n2)))\
print(f"\uc0\u1059 \u1075 \u1086 \u1083  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1103 \u1084 \u1080 : \{np.degrees(angle):.2f\} \u1075 \u1088 \u1072 \u1076 \u1091 \u1089 \u1086 \u1074 ")\
\
# \uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1103 \u1077 \u1084  \u1087 \u1072 \u1088 \u1072 \u1083 \u1083 \u1077 \u1083 \u1100 \u1085 \u1086 \u1089 \u1090 \u1100  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1077 \u1081 \
if np.cross(n1, n2).all() == 0:\
    print("\uc0\u1055 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080  \u1087 \u1072 \u1088 \u1072 \u1083 \u1083 \u1077 \u1083 \u1100 \u1085 \u1099 ")\
    # \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1088 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1103 \u1084 \u1080 \
    distance = abs(d1 - d2) / np.sqrt(a1**2 + b1**2 + c1**2)\
    print(f"\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1084 \u1077 \u1078 \u1076 \u1091  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1103 \u1084 \u1080 : \{distance:.2f\}")\
else:\
    print("\uc0\u1055 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080  \u1085 \u1077  \u1087 \u1072 \u1088 \u1072 \u1083 \u1083 \u1077 \u1083 \u1100 \u1085 \u1099 ")\
\
# \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1088 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1082 \u1072 \u1078 \u1076 \u1086 \u1081  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 \
distance1 = abs(a1*x0 + b1*y0 + c1*z0 + d1) / np.sqrt(a1**2 + b1**2 + c1**2)\
distance2 = abs(a2*x0 + b2*y0 + c2*z0 + d2) / np.sqrt(a2**2 + b2**2 + c2**2)\
print(f"\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1087 \u1077 \u1088 \u1074 \u1086 \u1081  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 : \{distance1:.2f\}")\
print(f"\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1086  \u1074 \u1090 \u1086 \u1088 \u1086 \u1081  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 : \{distance2:.2f\}")\
\
# \uc0\u1045 \u1089 \u1083 \u1080  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1082 \u1072 \u1102 \u1090 \u1089 \u1103 , \u1085 \u1072 \u1093 \u1086 \u1076 \u1080 \u1084  \u1087 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1099  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103 \
if not np.cross(n1, n2).all() == 0:\
    # \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1085 \u1072 \u1087 \u1088 \u1072 \u1074 \u1083 \u1103 \u1102 \u1097 \u1080 \u1081  \u1074 \u1077 \u1082 \u1090 \u1086 \u1088  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
    d = np.cross(n1, n2)\
    # \uc0\u1042 \u1099 \u1095 \u1080 \u1089 \u1083 \u1103 \u1077 \u1084  \u1090 \u1086 \u1095 \u1082 \u1091 , \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1072 \u1097 \u1091 \u1102  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
    x = (b1*c2*d1 - b2*c1*d1 - b1*c2*d2 + b2*c1*d2) / (a1*b2*c1 - a1*b1*c2 - a2*b1*c1 + a2*b2*c1)\
    y = (a2*c1*d1 - a1*c2*d1 - a2*c1*d2 + a1*c2*d2) / (a1*b2*c1 - a1*b1*c2 - a2*b1*c1 + a2*b2*c1)\
    z = (a1*b2*d1 - a2*b1*d1 - a1*b2*d2 + a2*b1*d2) / (a1*b2*c1 - a1*b1*c2 - a2*b1*c1 + a2*b2*c1)\
    print(f"\uc0\u1055 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1099  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1077 \u1081 : (\{x:.2f\}, \{y:.2f\}, \{z:.2f\})")\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb1 \kerning1\expnd0\expndtw0 \

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  3 \u1089 ++
\f1\b0 \
\
#include <iostream>\
#include <cmath>\
#include <cstdlib>\
#include <ctime>\
using namespace std;\
\
int main() \{\
   \
    srand(time(NULL));\
    double a = rand() % 10 + 1; \
    double b = rand() % 10 + 1; \
    double c = rand() % 10 + 1; \
\
    // \uc0\u1043 \u1077 \u1085 \u1077 \u1088 \u1072 \u1094 \u1080 \u1103  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1080  \u1085 \u1072  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 \
    double x0 = rand() % 20 - 10; \
    double y0 = rand() % 20 - 10; \
\
    // \uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1085 \u1086 \u1089 \u1090 \u1080  \u1090 \u1086 \u1095 \u1082 \u1080  \u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1077 \
    double y_p = a * x0 * x0 + b * x0 + c;\
    bool belongs_to_parabola = (y_p == y0);\
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1082 \u1086 \u1086 \u1088 \u1076 \u1080 \u1085 \u1072 \u1090  \u1092 \u1086 \u1082 \u1091 \u1089 \u1072  \u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1099 \
    double h = -b / (2 * a);\
    double k = c - b * b / (4 * a);\
    double focus_x = h;\
    double focus_y = k + 1 / (4 * a);\
\
    // \uc0\u1053 \u1072 \u1093 \u1086 \u1078 \u1076 \u1077 \u1085 \u1080 \u1077  \u1088 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1103  \u1086 \u1090  \u1076 \u1080 \u1088 \u1077 \u1082 \u1090 \u1088 \u1080 \u1089 \u1099  \u1076 \u1086  \u1092 \u1086 \u1082 \u1091 \u1089 \u1072 \
    double distance = abs(1 / (4 * a)) - abs(k + 1 / (4 * a));\
\
    // \uc0\u1042 \u1099 \u1074 \u1086 \u1076  \u1088 \u1077 \u1079 \u1091 \u1083 \u1100 \u1090 \u1072 \u1090 \u1086 \u1074 \
    cout << "\uc0\u1059 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1077  \u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1099 : y = " << a << "x^2 + " << b << "x + " << c << endl;\
    cout << "\uc0\u1057 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1072 \u1103  \u1090 \u1086 \u1095 \u1082 \u1072 : (" << x0 << ", " << y0 << ")" << endl;\
    \
    if (belongs_to_parabola) \{\
        cout << "\uc0\u1058 \u1086 \u1095 \u1082 \u1072  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1080 \u1090  \u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1077 ." << endl;\
    \} else \{\
        cout << "\uc0\u1058 \u1086 \u1095 \u1082 \u1072  \u1085 \u1077  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1080 \u1090  \u1087 \u1072 \u1088 \u1072 \u1073 \u1086 \u1083 \u1077 ." << endl;\
    \}\
\
    cout << "\uc0\u1050 \u1086 \u1086 \u1088 \u1076 \u1080 \u1085 \u1072 \u1090 \u1099  \u1092 \u1086 \u1082 \u1091 \u1089 \u1072 : (" << focus_x << ", " << focus_y << ")" << endl;\
    cout << "\uc0\u1056 \u1072 \u1089 \u1089 \u1090 \u1086 \u1103 \u1085 \u1080 \u1077  \u1086 \u1090  \u1076 \u1080 \u1088 \u1077 \u1082 \u1090 \u1088 \u1080 \u1089 \u1099  \u1076 \u1086  \u1092 \u1086 \u1082 \u1091 \u1089 \u1072 : " << distance << endl;\
\
    return 0;\
\}\
\

\f0\b \uc0\u1047 \u1072 \u1076 \u1072 \u1095 \u1072  4 \u1087 \u1080 \u1090 \u1086 \u1085 
\f1\b0 \
\
from sympy import symbols, Eq, solve\
\
# \uc0\u1057 \u1080 \u1084 \u1074 \u1086 \u1083 \u1100 \u1085 \u1099 \u1077  \u1087 \u1077 \u1088 \u1077 \u1084 \u1077 \u1085 \u1085 \u1099 \u1077 \
x, y, z = symbols('x y z')\
\
# \uc0\u1043 \u1077 \u1085 \u1077 \u1088 \u1072 \u1094 \u1080 \u1103  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1099 \u1093  \u1087 \u1072 \u1088 \u1072 \u1084 \u1077 \u1090 \u1088 \u1086 \u1074  \u1091 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1103  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1086 \u1075 \u1086  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1072 \
a = 2  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1077  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077   a\
b = 3  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1077  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077   b\
c = 4  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1077  \u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077  c\
\
# \uc0\u1059 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1077  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1086 \u1075 \u1086  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1072 \
hyperboloid_eq = Eq((x**2 / a**2) - (y**2 / b**2) - (z**2 / c**2), 1)\
\
# \uc0\u1043 \u1077 \u1085 \u1077 \u1088 \u1072 \u1094 \u1080 \u1103  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1081  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 \
A = 1  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1099 \u1081  A\
B = 2  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1099 \u1081  B\
C = 3  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1099 \u1081  C\
D = 4  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1099 \u1081  D\
\
# \uc0\u1059 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1077  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080 \
plane_eq = Eq(A*x + B*y + C*z, D)\
\
# \uc0\u1043 \u1077 \u1085 \u1077 \u1088 \u1072 \u1094 \u1080 \u1103  \u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1086 \u1081  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
t = symbols('t')\
point_x = 1  # \uc0\u1089 \u1083 \u1091 \u1095 \u1072 \u1081 \u1085 \u1072 \u1103  \u1082 \u1086 \u1086 \u1088 \u1076 \u1080 \u1085 \u1072 \u1090 \u1072  x \u1090 \u1086 \u1095 \u1082 \u1080  \u1085 \u1072  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
point_y = 2  \
point_z = 3  \
\
# \uc0\u1059 \u1088 \u1072 \u1074 \u1085 \u1077 \u1085 \u1080 \u1077  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081 \
line_eq = Eq(x, point_x + t)\
line_eq = line_eq.subs(y, point_y + t)\
line_eq = line_eq.subs(z, point_z + t)\
\
# \uc0\u1047 \u1072 \u1076 \u1072 \u1085 \u1085 \u1072 \u1103  \u1090 \u1086 \u1095 \u1082 \u1072  \u1074  \u1087 \u1088 \u1086 \u1089 \u1090 \u1088 \u1072 \u1085 \u1089 \u1090 \u1074 \u1077 \
given_point = (5, 6, 7)\
\
# \uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1095 \u1077 \u1085 \u1080 \u1103  \u1087 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1080  \u1080  \u1087 \u1088 \u1103 \u1084 \u1086 \u1081  \u1089  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1099 \u1084  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1086 \u1084 \
solutions_plane = solve([hyperboloid_eq, plane_eq], (x, y, z))\
solutions_line = solve([hyperboloid_eq, line_eq], (x, y, z))\
\
if solutions_plane:\
    print("\uc0\u1055 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1100  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1082 \u1072 \u1077 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1099 \u1081  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 .")\
else:\
    print("\uc0\u1055 \u1083 \u1086 \u1089 \u1082 \u1086 \u1089 \u1090 \u1100  \u1085 \u1077  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1082 \u1072 \u1077 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1099 \u1081  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 .")\
\
if solutions_line:\
    print("\uc0\u1055 \u1088 \u1103 \u1084 \u1072 \u1103  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1082 \u1072 \u1077 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1099 \u1081  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 .")\
else:\
    print("\uc0\u1055 \u1088 \u1103 \u1084 \u1072 \u1103  \u1085 \u1077  \u1087 \u1077 \u1088 \u1077 \u1089 \u1077 \u1082 \u1072 \u1077 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1099 \u1081  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 .")\
\
# \uc0\u1055 \u1088 \u1086 \u1074 \u1077 \u1088 \u1082 \u1072  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1085 \u1086 \u1089 \u1090 \u1080  \u1079 \u1072 \u1076 \u1072 \u1085 \u1085 \u1086 \u1081  \u1090 \u1086 \u1095 \u1082 \u1080  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1086 \u1084 \u1091  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1091 \
point_check = hyperboloid_eq.subs(\{x: given_point[0], y: given_point[1], z: given_point[2]\})\
if point_check == 1:\
    print("\uc0\u1047 \u1072 \u1076 \u1072 \u1085 \u1085 \u1072 \u1103  \u1090 \u1086 \u1095 \u1082 \u1072  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1080 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1086 \u1084 \u1091  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1091 .")\
else:\
    print("\uc0\u1047 \u1072 \u1076 \u1072 \u1085 \u1085 \u1072 \u1103  \u1090 \u1086 \u1095 \u1082 \u1072  \u1085 \u1077  \u1087 \u1088 \u1080 \u1085 \u1072 \u1076 \u1083 \u1077 \u1078 \u1080 \u1090  \u1076 \u1074 \u1091 \u1087 \u1086 \u1083 \u1086 \u1089 \u1090 \u1085 \u1086 \u1084 \u1091  \u1075 \u1080 \u1087 \u1077 \u1088 \u1073 \u1086 \u1083 \u1086 \u1080 \u1076 \u1091 .")}